process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;

const { Telegraf, Markup, session, Scenes, Composer } = require("telegraf");

const token_client = "5658698672:AAEJoW0r5goLqycGpm64K1KXA3bF3u1WN78";
const token_admin = "5716052270:AAH5gIRHWAiSb3mTehBSjRoG-eQqMfgBRe4";

const bot_client = new Telegraf(token_client);
const bot_admin = new Telegraf(token_admin);

bot_client.use(session());

const helpers = require("./helpers");
const offersData = require("./database/offers.json");
const dataReader = require("./data-reader");
const adminIds = dataReader.getAllAdminId();

const {
  profile_options,
  offer_options,
  offer_options_back,
} = require("./options");

const wizardName = new Composer();
wizardName.on("text", (ctx) => {
  ctx.reply("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
  return ctx.wizard.next();
});

const wizardAge = new Composer();
wizardAge.on("text", (ctx) => {
  const text = ctx.update.message.text;

  if (/^[–∞-—è–ê-–Ø—ë–Å]+$/.test(text)) {
    ctx.session.name = helpers.transformText(text);
    setTimeout(() => {
      ctx.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
      return ctx.wizard.next();
    }, 500);
  } else {
    ctx.reply("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã.");
  }
});

const wizardCity = new Composer();
wizardCity.on("text", (ctx) => {
  const text = ctx.update.message.text;
  if (/^[0-9 ]+$/.test(Number(text))) {
    ctx.session.age = text;
    ctx.reply(`${ctx.session.name}, –æ—Ç–∫—É–¥–∞ –≤—ã –ø—Ä–∏–µ—Ö–∞–ª–∏?`);
    return ctx.wizard.next();
  } else {
    ctx.reply("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.");
  }
});

const wizardWelcome = new Composer();
wizardWelcome.on("text", async (ctx) => {
  const text = ctx.update.message.text;
  if (/^[–∞-—è–ê-–Ø—ë–Å]+$/.test(text)) {
    ctx.session.city = helpers.transformText(text);

    //NOTE: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –±–æ—Ç–∞
    let isUserFound = dataReader.getUser(ctx.message.chat.id);

    if (!isUserFound) {
      console.log("isUserFound");
      adminIds.map(async (userId) => {
        await bot_admin.telegram.sendMessage(userId, sendNewUser(ctx.session), {
          parse_mode: "HTML",
        });
      });
    }

    dataReader.saveUser({
      name: ctx.session.name,
      age: ctx.session.age,
      city: ctx.session.city,
      userId: ctx.message.chat.id,
    });
    await ctx.reply(
      `üéâ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ "–í—ã–≥–æ–¥–Ω—ã–π –ø—É—Ç—å"!üéâ`
    );
    await sendMenu(ctx);

    return ctx.scene.leave();
  } else {
    ctx.reply("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã.");
  }
});

const menuScene = new Scenes.WizardScene(
  "scenesWizard",
  wizardName,
  wizardAge,
  wizardCity,
  wizardWelcome
);

const stage = new Scenes.Stage([menuScene]);

bot_client.use(stage.middleware());

bot_client.on("text", (ctx) => {
  const text = ctx.update.message.text;
  if (text === "/start" || text === "/restart") {
    sendHi(ctx);
    setTimeout(() => {
      ctx.scene.enter("scenesWizard");
    }, 500);
  }

  if (text === "/menu") {
    sendMenu(ctx);
  }

  if (ctx.message.text.match(/\/h(.+)|\/c(.+)|\/m(.+)|\/s(.+)/)) {
    const itemUuid = helpers.getItemUuid(text);
    const keyDataBase = helpers.getNameForSearch(text);
    const item = offersData[keyDataBase]?.find(
      (item) => item.uuid === itemUuid
    );
    if (item) {
      sendOfferCard(ctx, item, keyDataBase);
    }
  }
});

bot_client.on("callback_query", async (ctx) => {
  const callback_query = ctx.update.callback_query.data;
  const chatId = ctx.update.callback_query.from.id;
  const messageId = ctx.update.callback_query.message.message_id;

  if (callback_query === "back_to_main") {
    bot_client.telegram.deleteMessage(chatId, messageId);
    sendMenu(ctx);
  }

  if (
    callback_query === "profile_offer" ||
    callback_query === "back_to_offer"
  ) {
    bot_client.telegram.deleteMessage(chatId, messageId);
    sendOffers(ctx);
  }

  if (
    callback_query === "offer_hostel" ||
    callback_query === "back_to_hostel"
  ) {
    sendOfferByType(ctx, "hostel");
  }
  if (callback_query === "offet_cafe" || callback_query === "back_to_cafe") {
    sendOfferByType(ctx, "cafe");
  }
  if (
    callback_query === "offer_culture" ||
    callback_query === "back_to_culture"
  ) {
    sendOfferByType(ctx, "culture");
  }
  if (
    callback_query === "offer_souvenir" ||
    callback_query === "back_to_souvenir"
  ) {
    sendOfferByType(ctx, "souvenir");
  }
  if (
    callback_query === "offer_medicine" ||
    callback_query === "back_to_medicine"
  ) {
    sendOfferByType(ctx, "medicine");
  }

  if (callback_query === "reset") {
    bot_client.telegram.deleteMessage(chatId, messageId);
    ctx.replyWithHTML("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞");
    await ctx.scene.enter("scenesWizard");
  }

  console.log(chatId, messageId);
});

bot_client.launch();

function sendHi(ctx) {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†—è–∑–∞–Ω—å üëã –°–µ–π—á–∞—Å –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –≤—ã–≥–æ–¥–Ω–æ, –∞ –≥–ª–∞–≤–Ω–æ–µ —Å –ø–æ–ª—å–∑–æ–π –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–¥—ã—Ö.`
  );
}

async function sendMenu(ctx) {
  await ctx.replyWithHTML(
    "<b>‚è∫ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚è∫</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–µ—Ä–æ–≤. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, –æ—Ç–µ–ª–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
    profile_options.reply_markup
  );
}

function sendOffers(ctx) {
  ctx.replyWithHTML("<b>‚è∫ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ‚è∫</b>", offer_options.reply_markup);
}

function sendOfferByType(ctx, type) {
  const chatId = ctx.update.callback_query.from.id;
  const messageId = ctx.update.callback_query.message.message_id;

  const link = type.substring(0, 2);
  const html = offersData[type]
    .map((item, i) => {
      return `<b>${i + 1}.</b> <i>${item.title}</i> - /${link}${item.uuid}`;
    })
    .join("\n\n");
  const titleOffer = helpers.getTitleOffer(link);

  bot_client.telegram.deleteMessage(chatId, messageId);

  ctx.replyWithHTML(
    `<b>${titleOffer}</b>\n\n${html}`,
    offer_options_back.reply_markup
  );
}

function sendOfferCard(ctx, item, keyDataBase) {
  ctx.replyWithPhoto(
    { url: item.logo },
    {
      caption: `<b>${item?.title}</b>\n\n${item?.desc}\n\n<b>${item?.discount}</b>`,
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", `back_to_${keyDataBase}`),
      ]),
    }
  );
}

function sendNewUser(obj) {
  const html = `<b>üéâ –£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§</b>\n\n<b>–ò–º—è</b> - ${obj.name}\n<b>–í–æ–∑—Ä–∞—Å—Ç</b> - ${obj.age}\n<b>–ì–æ—Ä–æ–¥</b> - ${obj.city}`;
  return html;
}
