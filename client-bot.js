process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;

const { Telegraf, Markup, session, Scenes, Composer } = require("telegraf");

const token_client = "5655101504:AAHOpz0IuTcJsltGUdL8pYfhCJOCfFJc2m4";
const token_admin = "5523730787:AAFIeghzZwLo0qxSaD1gwBogBijSSl7rSWE";

const bot_client = new Telegraf(token_client);
const bot_admin = new Telegraf(token_admin);

bot_client.use(session());

const helpers = require("./helpers");
const offersData = require("./database/offers.json");

const request = require("./request");
const { createUser, getUser, getAllAdmin } = request;

const {
  profile_options,
  offer_options,
  offer_options_back,
} = require("./options");

const wizardName = new Composer();
wizardName.on("text", async (ctx) => {
  await ctx.reply("–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
  return ctx.wizard.next();
});

const wizardAge = new Composer();
wizardAge.on("text", async (ctx) => {
  const text = ctx.update.message.text;

  if (/^[–∞-—è–ê-–Ø—ë–Å]+$/.test(text) && text.length <= 10) {
    ctx.session.name = helpers.transformText(text);
    await ctx.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
    return ctx.wizard.next();
  } else {
    await ctx.replyWithHTML(
      "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞ üòÖ\n\n<i>–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 10-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.</i>"
    );
  }
});

const wizardCity = new Composer();
wizardCity.on("text", async (ctx) => {
  const text = ctx.update.message.text;
  if (/^[0-9 ]+$/.test(Number(text)) && text <= 100) {
    ctx.session.age = text;
    ctx.reply(`${ctx.session.name}, –æ—Ç–∫—É–¥–∞ –≤—ã –ø—Ä–∏–µ—Ö–∞–ª–∏?`);
    return ctx.wizard.next();
  } else {
    await ctx.replyWithHTML(
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è üòÖ\n\n<i>–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.</i>"
    );
  }
});

const wizardWelcome = new Composer();
wizardWelcome.on("text", async (ctx) => {
  const text = ctx.update.message.text;
  if (/^[–∞-—è–ê-–Ø—ë–Å `-]+$/.test(text) && text.length <= 23) {
    ctx.session.city = helpers.transformText(text);

    try {
      await createUser({
        name: ctx.session.name,
        age: ctx.session.age,
        city: ctx.session.city,
        userId: ctx.message.chat.id,
      });

      await ctx.replyWithHTML(
        `üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ <b>¬´–í—ã–≥–æ–¥–Ω—ã–π –ø—É—Ç—å¬ª</b>`
      );
      await ctx.replyWithHTML(
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, –æ—Ç–µ–ª–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
        profile_options.reply_markup
      );
    } catch (err) {
      await ctx.replyWithHTML(`–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑`);
    }

    try {
      await getAllAdmin().then((res) => {
        res.data.map((item) => {
          bot_admin.telegram.sendMessage(
            item.admin_id,
            sendNewUser(ctx.session),
            {
              parse_mode: "HTML",
            }
          );
        });
      });
    } catch (error) {
      console.log(error, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º");
    }

    return ctx.scene.leave();
  } else {
    await ctx.replyWithHTML(
      "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞ üòÖ\n\n<i>–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 23-—Ö —Å–∏–º–≤–æ–ª–æ–≤.</i>"
    );
  }
});

const menuScene = new Scenes.WizardScene(
  "scenesWizard",
  wizardName,
  wizardAge,
  wizardCity,
  wizardWelcome
);

const stage = new Scenes.Stage([menuScene]);

bot_client.use(stage.middleware());

bot_client.on("text", async (ctx) => {
  const text = ctx.update.message.text;
  const userId = ctx.message.chat.id;

  if (text === "/start" || text === "/restart") {
    try {
      const { status, data } = await getUser(userId);
      if (status === 201) {
        ctx.reply(`${data.name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!`);
        setTimeout(() => {
          sendMenu(ctx);
        }, 500);
      }
      if (status === 200) {
        sendHi(ctx);
        setTimeout(() => {
          ctx.scene.enter("scenesWizard");
        }, 500);
      }
    } catch (error) {
      console.log(error);
      await ctx.replyWithHTML(`–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑`);
    }
  }

  if (text === "/menu") {
    sendMenu(ctx);
  }

  if (ctx.message.text.match(/\/h(.+)|\/c(.+)|\/m(.+)|\/s(.+)/)) {
    const itemUuid = helpers.getItemUuid(text);
    const keyDataBase = helpers.getNameForSearch(text);
    const item = offersData[keyDataBase]?.find(
      (item) => item.uuid === itemUuid
    );
    if (item) {
      sendOfferCard(ctx, item, keyDataBase);
    }
  }
});

bot_client.on("callback_query", async (ctx) => {
  const callback_query = ctx.update.callback_query.data;
  const chatId = ctx.update.callback_query.from.id;
  const messageId = ctx.update.callback_query.message.message_id;

  if (callback_query === "back_to_main") {
    bot_client.telegram.deleteMessage(chatId, messageId);
    sendMenu(ctx);
  }

  if (callback_query === "profile_help") {
    bot_client.telegram.deleteMessage(chatId, messageId);
    sendHelp(ctx);
  }

  if (
    callback_query === "profile_offer" ||
    callback_query === "back_to_offer"
  ) {
    bot_client.telegram.deleteMessage(chatId, messageId);
    sendOffers(ctx);
  }

  if (
    callback_query === "offer_hostel" ||
    callback_query === "back_to_hostel"
  ) {
    sendOfferByType(ctx, "hostel");
  }
  if (callback_query === "offet_cafe" || callback_query === "back_to_cafe") {
    sendOfferByType(ctx, "cafe");
  }
  if (
    callback_query === "offer_culture" ||
    callback_query === "back_to_culture"
  ) {
    sendOfferByType(ctx, "culture");
  }
  if (
    callback_query === "offer_souvenir" ||
    callback_query === "back_to_souvenir"
  ) {
    sendOfferByType(ctx, "souvenir");
  }
  if (
    callback_query === "offer_medicine" ||
    callback_query === "back_to_medicine"
  ) {
    sendOfferByType(ctx, "medicine");
  }
});

bot_client.launch();

async function sendHi(ctx) {
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†—è–∑–∞–Ω—å üëã\n–°–µ–π—á–∞—Å –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –≤—ã–≥–æ–¥–Ω–æ –∏ —Å –ø–æ–ª—å–∑–æ–π –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–¥—ã—Ö.`
  );
}

async function sendMenu(ctx) {
  await ctx.replyWithHTML(
    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, –æ—Ç–µ–ª–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
    profile_options.reply_markup
  );
}

async function sendOffers(ctx) {
  await ctx.replyWithHTML("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>", offer_options.reply_markup);
}

async function sendOfferByType(ctx, type) {
  const chatId = ctx.update.callback_query.from.id;
  const messageId = ctx.update.callback_query.message.message_id;

  const link = type.substring(0, 2);
  const html = offersData[type]
    .map((item, i) => {
      return `üîò <b>${item.title}</b>\n–ü–æ–¥—Ä–æ–±–Ω–µ–π: üëâ /${link}${item.uuid}`;
    })
    .join("\n\n");
  const titleOffer = helpers.getTitleOffer(link);

  bot_client.telegram.deleteMessage(chatId, messageId);

  await ctx.replyWithHTML(
    `<b>${titleOffer}</b>\n\n<i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É</i> \n\n${html}`,
    offer_options_back.reply_markup
  );
}

async function sendOfferCard(ctx, item, keyDataBase) {
  await ctx.replyWithPhoto(
    { url: item.logo },
    {
      caption: `<b>${item?.title}</b>\n\n${item?.desc}\n\n<b>${item?.discount}</b>`,
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", `back_to_${keyDataBase}`),
      ]),
    }
  );
}

async function sendHelp(ctx) {
  await ctx.replyWithHTML(
    `–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ <b>¬´–í—ã–≥–æ–¥–Ω—ã–π –ø—É—Ç—å¬ª</b>, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à –¢—É—Ä–∏—Å—Ç—Å–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≥–æ—Å—Ç—è–º‚ù§Ô∏è\n\n–ñ–µ–ª–∞–µ–º –≤–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!\n\nüìç –¢–ò–¶, –ü–æ—á—Ç–æ–≤–∞—è, 54\n\nüìû +7 910 577 03-03\n\nü§ñ @visitryazantravelbot`,
    Markup.inlineKeyboard([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back_to_main")])
  );
}

function sendNewUser(obj) {
  const html = `<b>üéâ –£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§</b>\n\n<b>–ò–º—è</b> - ${obj.name}\n<b>–í–æ–∑—Ä–∞—Å—Ç</b> - ${obj.age}\n<b>–ì–æ—Ä–æ–¥</b> - ${obj.city}`;
  return html;
}
